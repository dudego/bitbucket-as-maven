apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'


kapt {
    correctErrorTypes = true
}

apply plugin: 'com.getkeepsafe.dexcount'


android {
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {

        applicationId "${versions.applicationId}.core.app"

        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.versionCode
        versionName versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        resConfig "en" //app supports only english language

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

    }

    dataBinding {
        enabled = true
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            useProguard false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            versionNameSuffix "${versions.debugVersionNameSuffix}[${getGitHash()}]"
            applicationIdSuffix versions.debugApplicationIdSuffix
            minifyEnabled false
            shrinkResources false
            //minifyEnabled false
            //useProguard true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    androidExtensions {
        experimental = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':corelibrary')
    implementation deps.kotlin
    implementation supportx.appcompat
    implementation deps.constraint_layout
    testImplementation deps.junit
    androidTestImplementation testdep.runner
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
